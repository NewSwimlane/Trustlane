#pragma checksum "/Users/trust1/GitHub/Trustlane/trustlaneweb/Pages/Website/ComplianceDashboard.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c1ae86dd61d356505b0b752980be9cdf5534db94"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace trustlaneweb.Pages.Website
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "/Users/trust1/GitHub/Trustlane/trustlaneweb/_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/Users/trust1/GitHub/Trustlane/trustlaneweb/_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/Users/trust1/GitHub/Trustlane/trustlaneweb/_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/Users/trust1/GitHub/Trustlane/trustlaneweb/_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "/Users/trust1/GitHub/Trustlane/trustlaneweb/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "/Users/trust1/GitHub/Trustlane/trustlaneweb/_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "/Users/trust1/GitHub/Trustlane/trustlaneweb/_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "/Users/trust1/GitHub/Trustlane/trustlaneweb/_Imports.razor"
using trustlaneweb;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "/Users/trust1/GitHub/Trustlane/trustlaneweb/_Imports.razor"
using trustlaneweb.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "/Users/trust1/GitHub/Trustlane/trustlaneweb/_Imports.razor"
using Syncfusion.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "/Users/trust1/GitHub/Trustlane/trustlaneweb/_Imports.razor"
using Syncfusion.Blazor.Calendars;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "/Users/trust1/GitHub/Trustlane/trustlaneweb/Pages/Website/ComplianceDashboard.razor"
using Syncfusion.Blazor.Layouts;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/Users/trust1/GitHub/Trustlane/trustlaneweb/Pages/Website/ComplianceDashboard.razor"
using Syncfusion.Blazor.Navigations;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/Users/trust1/GitHub/Trustlane/trustlaneweb/Pages/Website/ComplianceDashboard.razor"
using Syncfusion.Blazor.Maps;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/Users/trust1/GitHub/Trustlane/trustlaneweb/Pages/Website/ComplianceDashboard.razor"
using Syncfusion.Blazor.Charts;

#line default
#line hidden
#nullable disable
    public partial class ComplianceDashboard : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 187 "/Users/trust1/GitHub/Trustlane/trustlaneweb/Pages/Website/ComplianceDashboard.razor"
       
    SfAccumulationChart ActiveVisitorsInstance;
    SfMaps MapInstance;
    SfChart VisitorsChartInstance;
    SfChart TrafficHistoryInstance;
    SfAccumulationChart StatisticsChartInstance;
    Dictionary<string, object> SidebarAttribute = new Dictionary<string, object>()
{
        { "class", "custom-sidebar" }
    };
    Dictionary<string, object> ChartAttribute = new Dictionary<string, object>()
{
        { "class", "custom-chart" }
    };
    public string Visible { get; set; } = "hidden";
    public double[] CellSpacing = { 5, 5 };
    public int Columns = 6;
    public double AspectRatio = 100 / 85;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //OnAfterRenderAsync will be triggered after the component rendered.
        await Task.Delay(2500);
        // refreshing all the chart and map components to fit within the panel
        this.ActiveVisitorsInstance.Refresh();
        this.MapInstance.Refresh();
        this.VisitorsChartInstance.Refresh();
        this.TrafficHistoryInstance.Refresh();
        this.StatisticsChartInstance.Refresh();
        if (this.Visible == "hidden")
        {
            this.Visible = "visible";
            this.StateHasChanged();
        }
    }
    public class OffSet
    {
        public double x;
        public double y;
    };
    public OffSet MapOffset = new OffSet
    {
        x = 0.5,
        y = -10
    };
    public String ShapePropertyPath = "continent";
    public String ShapeDataPath = "continent";
    public class MapMarker
    {
        public double latitude;
        public double longitude;
    };
    public MapDataSettings MapShapeData = new MapDataSettings
    {
        async = true,
        dataOptions = "scripts/MapsData/WorldMap.json",
        type = "GET"
    };
    public class MapDataSettings
    {
        public Boolean async { get; set; }
        public String dataOptions { get; set; }
        public String type { get; set; }
    };
    public class MapDataSource
    {
        public string drillColor;
        public string continent;
        public string CategoryName;
        public double Sales;
        public string color;
    };
    public List<MapDataSource> DataSource = new List<MapDataSource>{
            new MapDataSource {
                drillColor= "#C13664",
                continent= "North America",
                CategoryName= "Books",
                Sales= 10882,
                color= "#71B081"
            },
            new MapDataSource {
                drillColor= "#9C3367",
                continent= "South America",
                CategoryName= "Books",
                Sales= 13776,
                color= "#5A9A77"
            },
            new MapDataSource {
                drillColor= "#80306A",
                continent= "Africa",
                CategoryName= "Books",
                Sales= 18718.0,
                color= "#498770"
            },
            new MapDataSource {
                drillColor= "#622D6C",
                continent= "Europe",
                CategoryName= "Books",
                Sales= 3746,
                color= "#39776C"
            },
            new MapDataSource {
                drillColor= "#462A6D",
                continent= "Asia",
                CategoryName= "Books",
                Sales= 10688,
                color= "#266665"
            },
            new MapDataSource {
                drillColor= "#2A2870",
                continent= "Australia",
                CategoryName= "Books",
                Sales= 30716,
                color= "#124F5E"
            }
    };
    public class MapMarkerDataSource
    {
        public double latitude;
        public double longitude;
        public string name;
    };
    public List<MapMarkerDataSource> MarkerDataSource = new List<MapMarkerDataSource> {
        new MapMarkerDataSource{ latitude= 37.6276571, longitude= -122.4276688, name= "San Bruno" },
        new MapMarkerDataSource{ latitude= 33.5302186, longitude= -117.7418381, name= "Laguna Niguel" },
        new MapMarkerDataSource{ latitude= 40.7424509, longitude= -74.0081468, name= "New York" },
        new MapMarkerDataSource{ latitude= -23.5268201, longitude= -46.6489927, name= "Bom Retiro" },
        new MapMarkerDataSource{ latitude= 43.6533855, longitude= -79.3729994, name= "Toronto" },
        new MapMarkerDataSource{ latitude= 48.8773406, longitude= 2.3299627, name= "Paris" },
        new MapMarkerDataSource{ latitude= 52.4643089, longitude= 13.4107368, name= "Berlin" },
        new MapMarkerDataSource{ latitude= 19.1555762, longitude= 72.8849595, name= "Mumbai" },
        new MapMarkerDataSource{ latitude= 35.6628744, longitude= 139.7345469, name= "Minato" },
        new MapMarkerDataSource{ latitude= 51.5326602, longitude= -0.1262422, name= "London" }
    };
    public class expenseData
    {
        public string UniqueId;
        public DateTime dateTime;
        public string Category;
        public string PaymentMode;
        public string TransactionType;
        public string Description;
        public int Amount;
        public string MonthShort;
        public string MonthFull;
        public string FormattedDate;
        public string Device;
    };
    private List<expenseData> VisitorsDatasource = new List<expenseData>
{
                new expenseData {
                    UniqueId = "T100003",
                    dateTime = new DateTime(2017,3,1),
                    Category = "Food",
                    PaymentMode = "Cash",
                    TransactionType = "Expense",
                    Description = "Confederate cush",
                    Amount = 900,
                    MonthShort = "Mar",
                    MonthFull = "March, 2017",
                    FormattedDate = "03/01/2017 08:53 PM",
                    Device = "Tablet",
                },
                new expenseData {
                    UniqueId = "T100004",
                    dateTime = new DateTime(2017,4,1),
                    Category = "Transportation",
                    PaymentMode = "Credit Card",
                    TransactionType = "Expense",
                    Description = "Public and other transportation",
                    Amount = 1200,
                    MonthShort = "Apr",
                    MonthFull = "April, 2017",
                    FormattedDate = "04/01/2017 10:44 PM",
                    Device = "Desktop",
                },
                new expenseData {
                    UniqueId = "T100005",
                    dateTime = new DateTime(2017,5,1),
                    Category = "Transportation",
                    PaymentMode = "Cash",
                    TransactionType = "Expense",
                    Description = "Public and other transportation",
                    Amount = 600,
                    MonthShort = "May",
                    MonthFull = "May, 2017",
                    FormattedDate = "05/01/2017 08:53 PM",
                    Device = "Mobile",
                }
            };
    public class columnData
    {
        public string x;
        public double y;
    }
    List<columnData> ColumDataSource = new List<columnData> {
                new columnData{ x =  "Jan", y =  46 }, new columnData{ x =  "Feb", y =  27 }, new columnData{ x =  "Mar", y =  26 }
            };
    List<columnData> ColumDataSource1 = new List<columnData> {
                new columnData{ x =  "Jan", y =  37 }, new columnData{ x =  "Feb", y =  23 }, new columnData{ x =  "Mar", y =  18 }
            };
    List<columnData> ColumDataSource2 = new List<columnData> {
                new columnData{ x =  "Jan", y =  38 }, new columnData{ x =  "Feb", y =  17 }, new columnData{ x =  "Mar", y =  26 }
            };
    public class pieData
    {
        public string x;
        public double y;
        public string text;
    }
    List<pieData> PieDataSource = new List<pieData> {
                 new pieData{ x = "Desktop", y = 37, text = "60%" }, new pieData{ x = "Mobile", y = 17, text = "10%" },
                 new pieData{ x = "Tablet", y = 19, text = "20%" }
            };
    public class lineData
    {
        public DateTime x;
        public double y;
    }
    List<lineData> LineDataSource = new List<lineData>
{
               new lineData{ x =  new DateTime(2002, 1, 1), y =  2.2 }, new lineData{ x =  new DateTime(2003, 1, 1), y =  3.4 },
               new lineData{ x =  new DateTime(2004, 1, 1), y =  2.8 }, new lineData{ x =  new DateTime(2005, 1, 1), y =  1.6 },
               new lineData{ x =  new DateTime(2006, 1, 1), y =  2.3 }, new lineData{ x =  new DateTime(2007, 1, 1), y =  2.5 },
               new lineData{ x =  new DateTime(2008, 1, 1), y =  2.9 }, new lineData{ x =  new DateTime(2009, 1, 1), y =  3.8 },
               new lineData{ x =  new DateTime(2010, 1, 1), y =  1.4 }, new lineData{ x =  new DateTime(2011, 1, 1), y =  3.1 }
            };
    List<lineData> LineDataSource1 = new List<lineData>
{
               new lineData{ x =  new DateTime(2002, 1, 1), y =  2 }, new lineData{ x =  new DateTime(2003, 1, 1), y =  1.7 },
               new lineData{ x =  new DateTime(2004, 1, 1), y =  1.8 }, new lineData{ x =  new DateTime(2005, 1, 1), y =  2.1 },
               new lineData{ x =  new DateTime(2006, 1, 1), y =  2.3 }, new lineData{ x =  new DateTime(2007, 1, 1), y =  1.7 },
               new lineData{ x =  new DateTime(2008, 1, 1), y =  1.5 }, new lineData{ x =  new DateTime(2009, 1, 1), y =  2.8 },
               new lineData{ x =  new DateTime(2010, 1, 1), y =  1.5 }, new lineData{ x =  new DateTime(2011, 1, 1), y =  2.3 }
            };

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
