#pragma checksum "/Users/trust1/GitHub/Trustlane/trustlaneweb/Pages/About/Index.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "fe1913fbe771d1ffc5a008ff39d6417638137237"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace trustlaneweb.Pages.About
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "/Users/trust1/GitHub/Trustlane/trustlaneweb/_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/Users/trust1/GitHub/Trustlane/trustlaneweb/_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/Users/trust1/GitHub/Trustlane/trustlaneweb/_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/Users/trust1/GitHub/Trustlane/trustlaneweb/_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "/Users/trust1/GitHub/Trustlane/trustlaneweb/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "/Users/trust1/GitHub/Trustlane/trustlaneweb/_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "/Users/trust1/GitHub/Trustlane/trustlaneweb/_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "/Users/trust1/GitHub/Trustlane/trustlaneweb/_Imports.razor"
using trustlaneweb;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "/Users/trust1/GitHub/Trustlane/trustlaneweb/_Imports.razor"
using trustlaneweb.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "/Users/trust1/GitHub/Trustlane/trustlaneweb/_Imports.razor"
using Syncfusion.Blazor.Calendars;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "/Users/trust1/GitHub/Trustlane/trustlaneweb/Pages/About/Index.razor"
using Syncfusion.Blazor.Inputs;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/Users/trust1/GitHub/Trustlane/trustlaneweb/Pages/About/Index.razor"
using Syncfusion.Blazor.Buttons;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/Users/trust1/GitHub/Trustlane/trustlaneweb/Pages/About/Index.razor"
using Syncfusion.Blazor.Cards;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/Users/trust1/GitHub/Trustlane/trustlaneweb/Pages/About/Index.razor"
using Syncfusion.Blazor.LinearGauge;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "/Users/trust1/GitHub/Trustlane/trustlaneweb/Pages/About/Index.razor"
using Syncfusion.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "/Users/trust1/GitHub/Trustlane/trustlaneweb/Pages/About/Index.razor"
using Syncfusion.Blazor.DropDowns;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "/Users/trust1/GitHub/Trustlane/trustlaneweb/Pages/About/Index.razor"
using Syncfusion.Blazor.InPlaceEditor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "/Users/trust1/GitHub/Trustlane/trustlaneweb/Pages/About/Index.razor"
using Syncfusion.Blazor.Gantt;

#line default
#line hidden
#nullable disable
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 357 "/Users/trust1/GitHub/Trustlane/trustlaneweb/Pages/About/Index.razor"
       
    private string[] MultiValue = new string[] { "United States", "Poland" };
    private object MultiSelectData = new
    {
        mode = "Box",
        placeholder = "Choose the countries",
        dataSource = Places
    };
    public class Countries
    {
        public string text { get; set; }
    }
    private static List<Countries> Places = new List<Countries>()
{
        new Countries(){ text= "Australia" },
        new Countries(){ text= "Bermuda" },
        new Countries(){ text= "Canada" },
        new Countries(){ text= "Cameroon" },
        new Countries(){ text= "Denmark" },
        new Countries(){ text= "Finland" },
        new Countries(){ text= "Greenland" },
        new Countries(){ text= "Poland" }
    };

    private string Phase1NumericValue = "$100.00";
    private object NumericModel = new
    {
        placeholder = "Currency format",
        value = 100,
        format = "c2"
    };

    int Default = 25;
    int[] Range = { 25, 75 };
    int CurrentMinStart = 10;
    int CurrentMinEnd = 40;
    int CurrentMaxStart = 60;
    int CurrentMaxEnd = 90;
    bool LockFirstHandle = false;
    bool LockSecondHandle = false;

    // For tiles
    [Inject] public NavigationManager NavigationManager { get; set; }
    [Inject] public IJSRuntime JsRuntime { get; set; }
    public async Task NavigateToUrlAsync(string url)
    {
        await JsRuntime.InvokeAsync<object>("open", url, "_blank");
    }







    public DateTime ProjectStart = new DateTime(2019, 2, 3);
    public DateTime ProjectEnd = new DateTime(2019, 3, 23);
    public DateTime EventDay1 = new DateTime(2019, 2, 8);
    public List<dynamic> TaskCollection { get; set; }
    public List<dynamic> ResourceCollection { get; set; }
    public int DefaultUnitWidth = 33;
    public int TopTierCount = 1;
    public int BottomTierCount = 1;
    public string DefaultFormatvalue = "MMM dd, yyyy";
    public bool TopCheckboxEnabled = true;
    public bool BottomCheckEnabled = true;
    public string DefaultBottomTierValue = "Day";
    public bool EnableTopNumericBox = true;
    public bool EnableTopUnitDropDown = true;
    public bool EnableTopFormatDropDown = true;
    public bool EnableBottomNumericBox = true;
    public bool EnableBottomUnitDropDown = true;
    public bool EnableBottomFormatDropDown = true;
    public string TopTierFormat = "MMM dd, yyyy";
    public string BottomTierFormat = "";
    TimelineViewMode TopTierUnit = TimelineViewMode.Week;
    TimelineViewMode BottomTierUnit = TimelineViewMode.Day;
   // public SfGantt<TimelineData.TaskData> GanttObject;
    List<DayFormat> YearFormats = new List<DayFormat>()
{
        new DayFormat { Id ="MMM ''yy", Format = "Jan '18" },
        new DayFormat {  Id = "y", Format = "2018"   },
        new DayFormat { Id = "MMMM, y", Format = "January, 18" },
    };
    List<DayFormat> MonthFormats = new List<DayFormat>()
{
        new DayFormat { Id = "MMM dd, yyyy", Format = "Jan 01, 2018" },
        new DayFormat { Id = "MMMM", Format = "January" },
        new DayFormat { Id = "MMM", Format = "Jan" },
    };
    List<DayFormat> WeekFormats = new List<DayFormat>()
{
        new DayFormat  { Id = "MMM dd, yyyy", Format = "Jan 01, 2019" },
        new DayFormat  { Id = "EEE MMM dd, 'yy", Format = "Mon Jan 01, '9" },
        new DayFormat  { Id = "EEE MMM dd", Format = "Mon Jan 01" },
    };
    List<DayFormat> DayFormats = new List<DayFormat>()
{
        new DayFormat  { Id = "", Format = "M" },
        new DayFormat  { Id = "E", Format = "Mon" },
        new DayFormat  { Id = "dd", Format = "01" },
    };
    List<DayFormat> HourFormats = new List<DayFormat>()
{
        new DayFormat  { Id = "hh", Format = "00" },
        new DayFormat  { Id = "hh : mm a", Format = "00 : 00 AM" },
        new DayFormat  { Id = "h : mm a", Format = "0 : 00 AM" },
    };
    List<TimelineUnit> TimelineUnits = new List<TimelineUnit>()
{
        new TimelineUnit { Id = "Year", Unit = "Year"  },
        new TimelineUnit { Id = "Month", Unit = "Month" },
        new TimelineUnit { Id = "Week", Unit = "Week" },
        new TimelineUnit { Id = "Day", Unit = "Day" },
        new TimelineUnit { Id = "Hour", Unit = "Hour" }
    };
    List<DayFormat> WeekFormatValue = new List<DayFormat>()
{
        new DayFormat { Id = "MMM dd, yyyy", Format = "Jan 01, 2019"   },
        new DayFormat {  Id = "EEE MMM dd, 'yy", Format = "Mon Jan 01, '19"  },
        new DayFormat { Id = "EEE MMM dd", Format = "Mon Jan 01" },
    };
    List<DayFormat> DayFormatValue = new List<DayFormat>()
{
        new DayFormat { Id = "", Format = "M" },
        new DayFormat { Id = "E", Format = "Mon" },
        new DayFormat { Id = "dd", Format = "01" }
    };
    public class TimelineUnit
    {
        public string Id { get; set; }
        public string Unit { get; set; }
    }
    public class DayFormat
    {
        public string Id { get; set; }
        public string Format { get; set; }
    }
    protected override void OnInitialized()
    {
        //this.TaskCollection = TimelineData.TimelineRecord();
        //this.ResourceCollection = TimelineData.EditingResources();
    }
    public void TopTierCheckChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        if (args.Checked)
        {
            TopTierUnit = TimelineViewMode.Week;
            EnableTopNumericBox = true;
            EnableTopUnitDropDown = true;
            EnableTopFormatDropDown = true;
        }
        else
        {
            TopTierUnit = TimelineViewMode.None;
            EnableTopNumericBox = false;
            EnableTopUnitDropDown = false;
            EnableTopFormatDropDown = false;
        }
    }
    public void BottomTierCheckChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        if (args.Checked)
        {
            BottomTierUnit = TimelineViewMode.Day;
            EnableBottomNumericBox = true;
            EnableBottomUnitDropDown = true;
            EnableBottomFormatDropDown = true;
        }
        else
        {
            BottomTierUnit = TimelineViewMode.None;
            EnableBottomNumericBox = false;
            EnableBottomUnitDropDown = false;
            EnableBottomFormatDropDown = false;
        }
    }
    public void TopUnitChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        TimelineViewMode changedTopUnit;
        switch (args.Value)
        {
            case "Year":
                changedTopUnit = TimelineViewMode.Year;
                WeekFormatValue = YearFormats;
                break;
            case "Month":
                changedTopUnit = TimelineViewMode.Month;
                WeekFormatValue = MonthFormats;
                break;
            case "Week":
                changedTopUnit = TimelineViewMode.Week;
                WeekFormatValue = WeekFormats;
                break;
            case "Day":
                changedTopUnit = TimelineViewMode.Day;
                WeekFormatValue = DayFormats;
                break;
            case "Hour":
                changedTopUnit = TimelineViewMode.Hour;
                WeekFormatValue = HourFormats;
                break;
            default:
                changedTopUnit = TimelineViewMode.Week;
                break;
        }
        this.updateUnitWidth(args.Value, "top");
        TopTierUnit = changedTopUnit;
    }
    public void BottomUnitChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        TimelineViewMode changedBottomUnit;
        switch (args.Value)
        {
            case "Year":
                changedBottomUnit = TimelineViewMode.Year;
                DayFormatValue = YearFormats;
                break;
            case "Month":
                changedBottomUnit = TimelineViewMode.Month;
                DayFormatValue = MonthFormats;
                break;
            case "Week":
                changedBottomUnit = TimelineViewMode.Week;
                DayFormatValue = WeekFormats;
                break;
            case "Day":
                changedBottomUnit = TimelineViewMode.Day;
                DayFormatValue = DayFormats;
                break;
            case "Hour":
                changedBottomUnit = TimelineViewMode.Hour;
                DayFormatValue = HourFormats;
                break;
            default:
                changedBottomUnit = TimelineViewMode.Day;
                break;
        }
        this.updateUnitWidth(args.Value, "bottom");
        BottomTierUnit = changedBottomUnit;
    }
    public void TopFormatChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        TopTierFormat = args.Value;
    }
    public void BottomFormatChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        BottomTierFormat = args.Value;
    }
    void updateUnitWidth(string unit, string tier)
    {
        int unitWidth;
        string topUnit = tier == "top" ? unit : TopTierUnit.ToString();
        string bottomUnit = tier == "bottom" ? unit : BottomTierUnit.ToString();
        string[] units = new string[6] { "None", "Hour", "Day", "Week", "Month", "Year" };
        string bootomCellUnit;
        if (Array.IndexOf(units, topUnit) == 0 && Array.IndexOf(units, bottomUnit) == 0)
        {
            bootomCellUnit = "Day";
        }
        else if (Array.IndexOf(units, topUnit) == 0 && Array.IndexOf(units, bottomUnit) > 0)
        {
            bootomCellUnit = bottomUnit;
        }
        else if (Array.IndexOf(units, topUnit) > 0 && Array.IndexOf(units, bottomUnit) == 0)
        {
            bootomCellUnit = topUnit;
        }
        else if (Array.IndexOf(units, topUnit) <= Array.IndexOf(units, bottomUnit))
        {
            bootomCellUnit = topUnit;
        }
        else
        {
            bootomCellUnit = bottomUnit;
        }
        switch (bootomCellUnit)
        {
            case "Year":
                unitWidth = 2000;
                break;
            case "Month":
                unitWidth = 300;
                break;
            case "Week":
                unitWidth = 150;
                break;
            case "Day":
                unitWidth = 33;
                break;
            case "Hour":
                unitWidth = 25;
                break;
            default:
                unitWidth = 33;
                break;
        }
        DefaultUnitWidth = unitWidth;
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
